name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - eunjun

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application-prod.yml
        env:
          spring.datasource.url:       ${{ secrets.SPRING_DATASOURCE_URL }}
          spring.datasource.username:  ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          spring.datasource.password:  ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          jwt.secret:                  ${{ secrets.JWT_SECRET }}
          jwt.expire-seconds:          ${{ secrets.JWT_EXPIRE_SECONDS }}

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Build Spring Boot JAR
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar --no-daemon

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" \
            | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/hireu:latest .

      - name: Push to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/hireu:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        env:
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/hireu:latest
          HOST:  ${{ secrets.EC2_HOST }}
          PORT:  ${{ secrets.EC2_SSH_PORT }}
          USER:  ${{ secrets.EC2_USER }}
          SPRING_DATASOURCE_URL:       ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME:  ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD:  ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          JWT_SECRET:                  ${{ secrets.JWT_SECRET }}
          JWT_EXPIRE_SECONDS:          ${{ secrets.JWT_EXPIRE_SECONDS }}
          SPRING_PROFILES_ACTIVE:      prod

        run: |
          ssh -o StrictHostKeyChecking=no -p $PORT $USER@$HOST << EOF
            echo "Pulling image..."
            sudo docker pull $IMAGE

            echo "Stopping old container (if any)..."
            sudo docker stop spring-server || true
            sudo docker rm   spring-server || true

            echo "Starting new container..."
            sudo docker run -d \
              --name spring-server \
              -p 80:8080 -p 443:8443 \
              $IMAGE

            echo "Cleaning up unused images..."
            sudo docker image prune -f
          EOF
